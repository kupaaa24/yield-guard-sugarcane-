# -*- coding: utf-8 -*-
"""Sugarcane.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/15vYDjqfizR-laDPo6TOEcOnZXmLVYIl1
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import mean_squared_error, r2_score

# Models
from sklearn.linear_model import LinearRegression
from sklearn.tree import DecisionTreeRegressor
from sklearn.ensemble import RandomForestRegressor, GradientBoostingRegressor
from sklearn.svm import SVR
from xgboost import XGBRegressor

import joblib

df = pd.read_csv("sugarcane_Dataset.csv")

# Features and target
X = df[['N', 'P', 'K', 'pH', 'EC', 'Temperature', 'Humidity']]
y = df['Fertility']

# Split data
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

models = {
    "Linear Regression": LinearRegression(),
    "Decision Tree": DecisionTreeRegressor(random_state=42),
    "Random Forest": RandomForestRegressor(n_estimators=100, random_state=42),
    "Gradient Boosting": GradientBoostingRegressor(n_estimators=100, random_state=42),
    "SVR": SVR(),
    "XGBoost": XGBRegressor(n_estimators=100, learning_rate=0.1, max_depth=5, random_state=42)
}

results = []
for name, model in models.items():
    model.fit(X_train_scaled, y_train)
    y_pred = model.predict(X_test_scaled)
    rmse = np.sqrt(mean_squared_error(y_test, y_pred))
    r2 = r2_score(y_test, y_pred)
    results.append((name, rmse, r2))
    print(f"{name}: RMSE={rmse:.2f}, R²={r2:.2f}")

best_model = max(results, key=lambda x: x[2])  # highest R²
print(f"\n Best Model: {best_model[0]} with R²={best_model[2]:.2f}")

# Extract model names and their RMSE and R² scores
model_names = [r[0] for r in results]
rmses = [r[1] for r in results]
r2_scores = [r[2] for r in results]

# Plot RMSE bar graph
plt.figure(figsize=(10,5))
plt.bar(model_names, rmses, color='salmon')
plt.title('Model RMSE Comparison')
plt.xlabel('Models')
plt.ylabel('RMSE')
plt.xticks(rotation=45)
plt.show()

# Plot R² bar graph
plt.figure(figsize=(10,5))
plt.bar(model_names, r2_scores, color='skyblue')
plt.title('Model R² Comparison')
plt.xlabel('Models')
plt.ylabel('R² Score')
plt.xticks(rotation=45)
plt.show()


# Save best model and scaler
final_model = models[best_model[0]]
joblib.dump(final_model, "best_model.pkl")
joblib.dump(scaler, "scaler.pkl")
print("Model and scaler saved.")

